/////////////////////////////////////////////////////////////////////
//
// Модуль часто используемых функций работы с файлами
//
// (с) EvilBeaver, 2016
//
/////////////////////////////////////////////////////////////////////


// Проверяет существование файла или каталога
//
// Параметры:
//   Путь - Проверяемый путь
//
//  Возвращаемое значение:
//   Булево   - Истина, если файл/каталог существует
//
Функция Существует(Знач Путь) Экспорт
    
    Объект = Новый Файл(Путь);
    
    Возврат Объект.Существует();
    
КонецФункции // Существует()

// Проверяет существование файла
//
// Параметры:
//   Путь - Проверяемый путь
//
//  Возвращаемое значение:
//   Булево   - Истина, если файл существует
//
Функция ФайлСуществует(Знач Путь) Экспорт
    
    Объект = Новый Файл(Путь);
    
    Возврат Объект.Существует() и Объект.ЭтоФайл();
    
КонецФункции // ФайлСуществует()

// Проверяет существование каталога
//
// Параметры:
//   Путь - Проверяемый путь
//
//  Возвращаемое значение:
//   Булево   - Истина, если каталог существует
//
Функция КаталогСуществует(Знач Путь) Экспорт
    
    Объект = Новый Файл(Путь);
    
    Возврат Объект.Существует() и Объект.ЭтоКаталог();
    
КонецФункции // КаталогСуществует()

// Гарантирует наличие пустого каталога с указанным именем
//
// Параметры:
//   Путь - Строка - Путь к каталогу
//
Процедура ОбеспечитьПустойКаталог(Знач Путь) Экспорт
    
    ОбеспечитьКаталог(Путь);
    УдалитьФайлы(Путь, ПолучитьМаскуВсеФайлы());
    
КонецПроцедуры // ОбеспечитьПустойКаталог()

// Гарантирует наличие каталога с указанным именем
//
// Параметры:
//   Путь - Строка - Путь к каталогу
//
Процедура ОбеспечитьКаталог(Знач Путь) Экспорт
    
    Объект = Новый Файл(Путь);
    Если Не Объект.Существует() Тогда
        СоздатьКаталог(Путь);
    ИначеЕсли НЕ Объект.ЭтоКаталог() Тогда
        ВызватьИсключение "Не удается создать каталог " + Путь + ". По данному пути уже существует файл.";
    КонецЕсли;
    
КонецПроцедуры // ОбеспечитьКаталог()

// Копирует все файлы из одного каталога в другой
//
// Параметры:
//   Откуда - Строка - Путь к исходному каталогу
//   Куда - Строка - Путь к каталогу-назначению
//
Процедура КопироватьСодержимоеКаталога(Знач Откуда, Знач Куда) Экспорт

	ОбеспечитьКаталог(Куда);

	Файлы = НайтиФайлы(Откуда, ПолучитьМаскуВсеФайлы());
	Для Каждого Файл Из Файлы Цикл
		ПутьКопирования = ОбъединитьПути(Куда, Файл.Имя);
		Если Файл.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, ПутьКопирования);
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, ПутьКопирования);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Оборачивает переденную строку в кавычки, если она еще не обернута.
//
// Параметры:
//   Строка - Строка - Оборачиваемая строка.
//
//  Возвращаемое значение:
//   Строка - Строка, обернутая в кавычки.
//
Функция ОбернутьВКавычки(Знач Строка) Экспорт
    
    Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
        Возврат Строка;
    Иначе
        Возврат """" + Строка + """";
    КонецЕсли;
    
КонецФункции

// Оборачивает переданный путь в кавычки.
// Дополнительно убирается конечный слэш.
//
// Параметры:
//   Путь - Строка - Путь к файлу или каталогу.
//
//  Возвращаемое значение:
//   Строка - Путь, обернутый в кавычки.
//
Функция ОбернутьПутьВКавычки(Знач Путь) Экспорт

	Если Прав(Путь, 1) = "\" Тогда
		Путь = Лев(Путь, СтрДлина(Путь) - 1);
	КонецЕсли;

	Путь = ОбернутьВКавычки(Путь);

	Возврат Путь;

КонецФункции

// Убирает кавычки вокруг переданной строки.
//
// Параметры:
//   Строка - Строка - Строка, у которой надо убрать кавычки вокруг.
//
//  Возвращаемое значение:
//   Строка - Строка без кавычек вокруг.
//
Функция УбратьКавычкиВокруг(Знач Строка) Экспорт

	Если Лев(Строка, 1) = """" Тогда
		Строка = Прав(Строка, СтрДлина(Строка) - 1);
	КонецЕсли;
	Если Прав(Строка, 1) = """" Тогда
		Строка = Лев(Строка, СтрДлина(Строка) - 1);
	КонецЕсли;

	Возврат Строка;

КонецФункции
